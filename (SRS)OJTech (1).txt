CEBU INSTITUTE OF TECHNOLOGY
UNIVERSITY
  
  



COLLEGE OF COMPUTER STUDIES






Software Requirements Specifications
for
OJTech: AI-Powered OJT Job Matching Portal
Change History


Version
	Date
	Author
	Description
	1.0
	Feb 11, 2025
	Aldrin John Vitorillo
	Initial SRS document
	2.0
	May 25, 2025
	Jiv Tuban, Lanz Roy Sumalpong 
	Revised based on User recommendation 
	

Table of Contents




Change History        2
Table of Contents        3
1.        Introduction        4
1.1.        Purpose        4
1.2.        Scope        4
1.3.        Definitions, Acronyms and Abbreviations        4
1.4.        References        4
2.        Overall Description        5
2.1.        Product Perspective        5
2.2.        User characteristics        5
2.4.         Constraints        5
2.5.         Assumptions and Dependencies        6
3.        Specific Requirements        7
3.1.        External Interface Requirements        7
3.1.1.        Hardware Interfaces        7
3.1.2.        Software Interfaces        7
3.1.3.        Communications Interfaces        7
3.2.        Functional Requirements        7


Module 1: User Setup        7
Module 2: CV Management
Module 3: Job Matching and Employer Portal
Module 4: Job Application and Admin Functions        8
3.4        Non-functional Requirements
      Performance        8
Security        8
Reliability






 








1. Introduction


   1. Purpose 
The Software Requirements Specification (SRS) for OJTECH, an AI-powered job-matching system, serves as a comprehensive blueprint that outlines the detailed requirements, scope, and objectives to ensure the application effectively supports students from the College of Computer Studies at Cebu Institute of Technology University in securing tailored On-the-Job Training (OJT) opportunities. The SRS provides a structured framework to guide the development, implementation, and evaluation of OJTECH, ensuring alignment with stakeholder needs, technical feasibility, and institutional goals
   2. Scope
OJTech is a web-based application designed to serve three primary user groups: students, employers, and administrators within the College of Computer Studies OJT program. The system scope includes:

* Module 1 - User Setup:
   * Student Authentication: Account registration, email verification, and multi-method login (local, Google, GitHub OAuth).
   * Student Onboarding: Profile creation with personal information, academic details, and GitHub projects.
   * Employer Registration: Admin-created accounts with email verification.
   * Employer Onboarding: Company information collection, logo uploads, and profile management.

* Module 2 - CV Management:
   * CV Generation: AI-powered CV creation using student profile data through Gemini API.
   * CV Storage and Updates: Secure storage, version history, and student-driven updates.

* Module 3 - Job Matching and Employer Portal:
   * Employer Dashboard: Job creation, editing, deletion, and application review.
   * AI Job Matching: Skill extraction, requirement analysis, match scoring, and personalized recommendations.

* Module 4 - Job Application and Admin Functions:
   * Student Job Application: Card-based interface with swipe functionality, cover letter generation, and application tracking.
   * Admin Dashboard: User account management, system monitoring, and performance tracking.

* Security & Authentication: OAuth integration, JWT-based session management, and role-based access control.
* System Performance: Support for concurrent users with optimized response times and database performance.
   1. Definitions, Acronyms and Abbreviations
* AI: Artificial Intelligence - Algorithms used for job matching and skill extraction.
* API: Application Programming Interface.
* CV: Curriculum Vitae - Document generated by AI from student form inputs.
* CITU: Cebu Institute of Technology University.
* JWT: JSON Web Token - Used for secure authentication.
* MOA: Memorandum of Agreement - Formal partnership between CIT-U and companies.
* OAuth: Open standard authentication protocol.
* OJT: On-the-Job Training - Internship program required for students.
* RBAC: Role-Based Access Control - Security model for managing user permissions.
* REST: Representational State Transfer - Architectural style for web services.
* SPA: Single Page Application - Web application that dynamically updates content.


   2. References
[1] IBM. "Artificial Intelligence (AI)." [No explicit version/date found, accessed May 24 2025]. Available at: https://www.ibm.com/think/topics/artificial-intelligence
 [2] Merriam-Webster. "Curriculum Vitae." [Accessed May 24, 2025]. Available at: https://www.merriam-webster.com/dictionary/curriculum%20vitae 
[3] Cebu Institute of Technology - University. "Home." [Accessed May 24, 2025]. Available at: https://cit.edu
[4] jwt.io. "Introduction to JSON Web Tokens." [Accessed May 24, 2025]. Available at: https://jwt.io/introduction 
[5] Investopedia. "Memorandum of Understanding (MOU)." Investopedia. Accessed May 24, 2025. Available at: https://www.investopedia.com/terms/m/mou.asp
[6] OAuth Community. "OAuth.net." Accessed May 24, 2025. Available at: https://oauth.net
[7] Wikipedia. "On-the-job training (OJT)." Wikipedia, The Free Encyclopedia. Last updated May 17, 2025. Accessed May 24, 2025. Available at: https://en.wikipedia.org/wiki/On-the-job_training
[8] Imperva. "Role-Based Access Control (RBAC)." Imperva.com. Accessed May 24, 2025. Available at: https://www.imperva.com/learn/data-security/role-based-access-control-rbac/#:~:text=Role-based%20access%20control%20(RBAC)%2C%20also%20known%20as,enable%20access%20to%20authorized%20users.
[9] Restful API. "What is REST?" RestfulAPI.net. Accessed May 24, 2025. Available at: https://restfulapi.net
[10] MDN Web Docs. "SPA (Single Page Application)." MDN Web Docs Glossary. Last updated May 21, 2024. Accessed May 24, 2025. Available at: https://developer.mozilla.org/en-US/docs/Glossary/SPA
[11] PlantUML. "Activity Diagram (beta)." PlantUML.com. Accessed May 24, 2025. Available at: https://plantuml.com/activity-diagram-beta
[12] Lucidchart. "UML Use Case Diagram Tutorial." Lucidchart.com. Accessed May 24, 2025. Available at: https://www.lucidchart.com/pages/uml-use-case-diagram
2. Overall Description




   3. Product perspective
        The AI-powered job-matching system is a standalone web application that integrates AI-driven recommendations with job-matching services. The system is designed to function independently but can integrate with third-party APIs for job postings and CV optimization.
   4. User characteristics
OJTech serves three distinct user categories:
1. Students:
   * Computer Studies undergraduates at Cebu Institute of Technology University requiring OJT placements
   * Possess basic technical skills and familiarity with web applications
   * Need efficient job matching and application management
   * Typically access the system via desktop computers or mobile devices
   * Primary goals: Find relevant OJT opportunities, submit applications, track progress
2. Employers:
   * Technology companies and organizations in Cebu with MOAs for Cebu Institute of TechnologyUniversityOJT program
   * Include companies like Alliance Software, Kyocera, CodeChum, Symph, and Talleco
   * Need efficient candidate sourcing and application management
   * Typically access via desktop computers during business hours
   * Primary goals: Post job openings, find qualified candidates, manage applications
3. Administrators:
   * Possess administrative permissions and system oversight responsibilities
   * Need comprehensive management and reporting capabilities
   * Access primarily via desktop computers on campus
   * Primary goals: Monitor placements, manage users, generate reports, ensure program success
2.4.         Constraints
The development and operation of OJTech are subject to the following constraints:
1. Budget Constraints:
   * Limited funding for premium cloud services and AI API usage
   * Reliance on cost-effective platforms (DigitalOcean, Vercel) and free/low-tier API services
   * No budget for dedicated hardware; development on existing workstations
2. Timeline Constraints:
   * Development must be completed within one academic semester (5 months)
   * Implementation follows two-week Agile sprints within the semester timeline
   * Features must be prioritized to meet academic deadlines
3. Technical Constraints:
   * System designed for approximately 20 concurrent users
   * Dependence on external API services (Gemini, OAuth providers)
   * Web-based platform only; no native mobile applications
   * Limited to Computer Studies students and OJT partners with formal MOAs
4. Regulatory Constraints:
   * Compliance with the Philippines Data Privacy Act of 2012
   * Adherence to CITU academic and OJT program policies
   * User consent required for data collection and processing
2.5.         Assumptions and dependencies
The following assumptions and dependencies apply to the OJTech system:
Assumptions:
* Students will have access to the internet and compatible devices
      * Students will provide accurate and complete form inputs (e.g., personal information, skills, GitHub projects).
      * Employers will provide complete and accurate job posting details.
      * AI algorithms will extract skills and match jobs with reasonable accuracy.
      * CITU will provide necessary academic information and support for implementation.
Dependencies:
* Availability and reliability of external services:
   * Gemini API for AI functionality
   * GitHub and Google OAuth for authentication
   * DigitalOcean and Vercel for hosting
* Continued participation of employer partners with active MOAs
* Integration with CITU academic calendars and OJT schedules
* Browser compatibility with modern web standards
3. Specific Requirements 
   1. External interface requirements
3.1.1.        Hardware interfaces
The OJTech system is web-based and does not require specialized hardware. Users will access the system through standard computing devices with the following minimum specifications:
Development Environment:
* Developer workstations: Intel Core i5 or equivalent, 16GB RAM, 256GB SSD
* Testing server: Virtual machine with 8GB RAM, 4-core CPU, 64GB storage
Deployment Environment:
* Backend: DigitalOcean Droplet with 2GB RAM, 2 vCPUs, 80GB SSD
* Frontend: Vercel platform for hosting React.js frontend
User Devices:
* Desktop/Laptop:
   * Processor: Intel Core i3 (6th Gen) / AMD Athlon Silver or equivalent
   * RAM: 4GB minimum
   * Display: 1280x720 resolution or higher
   * Modern web browser (Chrome, Firefox, Safari, Edge - 2023 versions or newer)
* Mobile/Tablet:
   * Responsive design supporting various screen sizes
   * Modern mobile browser
   * Minimum 2Mbps internet connection




3.1.2.        Software interfaces
OJTech integrates with the following software systems:
1. Frontend Technologies:
   * React.tsx for component-based UI development
   * Tailwind CSS and Radix UI primitives for styling and UI components
   * Axios for API communication and data fetching
2. Backend Technologies:
   * Spring Boot for REST API development
   * JPA/Hibernate for database operations
   * Spring Security for authentication and authorization
3. Database System:
   * MySQL 8.0 for data storage and retrieval
   * JPA/Hibernate for object-relational mapping
4. External APIs:
   * Gemini API for AI-powered features:
      * Skill extraction from CVs
      * Job matching algorithms
      * CV optimization suggestions
   * OAuth providers (GitHub, Google) for authentication
5. File Storage:
   * Cloudinary for storing images and logos
   * Secure file storage for CV document




3.1.3.        Communications interfaces
OJTech utilizes the following communication protocols and methods:
1. HTTP/HTTPS:
   * RESTful API communication between frontend and backend
   * Secure HTTPS for all data transmission
2. Authentication Protocols:
   * OAuth 2.0 for third-party authentication
   * JWT for secure session management
3. API Communication:
   * JSON format for data exchange
   * RESTful principles for API design
   * Standard HTTP methods (GET, POST, PUT, DELETE)
4. Database Communication:
   * JDBC for database connectivity
   * JPA/Hibernate for database operations






















3.2 Functional requirement
Module 1 - User Setup



1.1 Student Authentication
Use Case Diagram:
  

________________




Use Case Description:
Register Account:
* Actor/s: Student

* Description: Allows students to create a new account in the system by providing email address and password.
 
   * Preconditions: Students must have a valid email address and access to the registration interface.

   * Postconditions: Student account is created in the system and email verification process is initiated.
Verify Email:
      * Actor/s: Student

      * Description: Enables students to verify their email address by clicking on a verification link sent to their registered email address.

      * Preconditions: Students must have registered an account and received email verification instructions.

      * Postconditions: Email address is verified and confirmed in the system, allowing account activation.
Send Email Verification:
         * Actor/s: Authentication System

         * Description: System automatically sends email verification messages to students email addresses during registration process.

         * Preconditions: Student account must be registered and valid email address must be provided.

         * Postconditions: Verification email is sent to the student's registered email address for confirmation.
Login with Local Account:
            * Actor/s: Student

            * Description: Allows students to authenticate and access the system using their registered email/username and password credentials created during account registration.

            * Preconditions: Student must have a verified account with valid login credentials in the system.

            * Postconditions: Student is authenticated and granted access to the system with appropriate user privileges.
Login with Google:
               * Actor/s: Student

               * Description: Enables students to authenticate and access the system using their existing Google account credentials through OAuth integration for convenient single sign-on access.

               * Preconditions: Students must have a valid Google account.
 
                  * Postconditions: Student is authenticated through Google OAuth and granted system access with appropriate user privileges.
Login with GitHub:
                  * Actor/s: Student

                  * Description: Allows students to authenticate and access the system using their existing GitHub account credentials through OAuth integration for streamlined authentication process.

                  * Preconditions: Students must have a valid GitHub account.

                  * Postconditions: Student is authenticated through GitHub OAuth and granted system access with appropriate user privileges.
Activity Diagram:  




Wireframe:  
________________






























1.2 Student Onboarding
Use Case Diagram:
  


Use Case Description:

Fill Onboarding Form:
                     * Actor/s: Student
                     * Description: Enables a student to complete the initial onboarding process by filling out personal information, academic details, and github projects(optional).
                     * Preconditions: Student must have created an account
                     * Postconditions: Student's onboarding information is captured and ready for preview.
Preview Completed Form:
                     * Actor/s: Student
                     * Description: Allows the student to review all entered information in the onboarding form before final submission.
                     * Preconditions: Student must have completed the onboarding form with all required fields filled.
                     * Postconditions: Student can view their completed form data and proceed to submission.
Submit Form:
                     * Actor/s: Student
                     * Description: Enables the student to finalize and submit their completed onboarding form.
                     * Preconditions: Student must have previewed the completed form and confirmed all information is correct.
                     * Postconditions: Onboarding form is submitted successfully. 
Manage Profile:
                     * Actor/s: Student
                     * Description: Allows the student to update and maintain their personal information, academic details, skills, and account settings after initial onboarding.
                     * Preconditions: Students must be registered in the system and have completed initial onboarding.
                     * Postconditions: Student profile is updated with new information and changes are saved to the system.




























Activity Diagram:  








Wireframe:  
________________



















1.3 Employer Registration
Use case diagram
  



Use Case Description: 
Create Employer Account:
                     * Actor/s: Admin
                     * Description: Enables an admin to create a new employer account by entering company name and email address.
                     * Preconditions: Admin must be logged in and have proper authorization to create employer accounts.
                     * Postconditions: Employer account is created and email verification is automatically triggered.
Send Email Verification:
                     * Actor/s: System
                     * Description: Automatically sends an email verification link to the newly created employer account to confirm their email address and activate the account.
                     * Preconditions: Employer account must be successfully created by admin.
                     * Postconditions: Verification email is sent to the employer's registered email address.
Verify Email:
                     * Actor/s: Employer
                     * Description: Allows the employer to confirm their email address by clicking the verification link sent to their email, completing the account activation process.
                     * Preconditions: Employer must have received the verification email and the verification link must be valid.
                     * Postconditions: Employer email is verified and account is activated for login access.


Activity Diagram:  






Wireframe:  













1.4 Employer Onboarding
Use Case Diagram:
  



Use Case Description:


Fill Onboarding Form:
                     * Actor/s: Employer
                     * Description: Enables an employer to complete the initial onboarding process by filling out required company information, company location & branding, and contact person.
                     * Preconditions: Employer must have a verified account and be logged into the system.
                     * Postconditions: Employer's onboarding information is captured and ready for preview.
Upload Company Logo:
                     * Actor/s: Employer
                     * Description: Allows the employer to upload their company logo image file to be displayed on their profile and job postings for branding purposes.
                     * Preconditions: Employer must be in the process of filling the onboarding form and have a valid image file to upload.
                     * Postconditions: Company logo is uploaded and associated with the employer's profile.
Preview Completed Form:
                     * Actor/s: Employer
                     * Description: Allows the employer to review all entered information in the onboarding form, including uploaded company logo, before final submission to ensure accuracy and completeness.
                     * Preconditions: Employer must have completed the onboarding form with all required fields filled.
                     * Postconditions: Employer can view their completed form data and proceed to submission or make modifications.
Submit Form:
                     * Actor/s: Employer
                     * Description: Enables the employer to finalize and submit their completed onboarding form to the system for processing and profile activation.
                     * Preconditions: Employer must have previewed the completed form and confirmed all information is correct.
                     * Postconditions: Onboarding form is submitted successfully and employer profile setup process is completed.
Manage Profile:
                     * Actor/s: Employer
                     * Description: Allows the employer to update and maintain their company information, business details, contact information, logo, and recruitment preferences after initial onboarding.
                     * Preconditions: Employer must be logged in and have completed the initial onboarding process.
                     * Postconditions: Employer profile is updated with new information and changes are saved to the system.
Activity Diagram:  


Wireframe:  














Module 2 - CV Management

2.1 CV Generation
Use Case Diagram:


  
[a]
________________




Use Case Description:
Request CV Generation:
                     * Actor/s: Student
                     * Description: Enables a student to initiate the CV generation process by requesting the system to create a professional CV using their stored profile information.
                     * Preconditions: Students must be logged in and have completed their profile with sufficient information for CV generation.
                     * Postconditions: CV generation request is initiated and profile data retrieval process begins.
Retrieve Student Profile Data:
                     * Actor/s: System
                     * Description: Automatically retrieves all relevant student information from their profile data that was collected during the onboarding process to be used for CV generation.
                     * Preconditions: Students must have requested CV generation and profile data must exist in the system.
                     * Postconditions: Student profile data is successfully retrieved and prepared for CV generation processing.
Generate CV:
                     * Actor/s: Gemini AI
                     * Description: Processes the retrieved student profile data using Gemini AI to create CV content, organizing information into appropriate sections and optimizing presentation.
                     * Preconditions: Student profile data must be successfully retrieved.
                     * Postconditions: CV content is generated and ready for document formatting.
Format CV Document:
                     * Actor/s: Gemini AI
                     * Description: Formats the generated CV content into a professional document layout with proper styling, typography, and structure suitable for download.
                     * Preconditions: CV content must be successfully generated by Gemini AI.
                     * Postconditions: CV is formatted into a professional document ready for delivery to the student.
Deliver CV to Student:
                     * Actor/s: System
                     * Description: Provides the completed and formatted CV document to the student through direct access within the platform.
                     * Preconditions: CV document must be successfully formatted and ready for delivery.
                     * Postconditions: Students receive their generated CV and can access it for their use.
Activity Diagram:  


Wireframe:  






















2.2 CV Management and Storage 
Use Case Diagram:  


Use Case Description:
Update CV Information:
                     * Actor/s: Student
                     * Description: Allows students to modify, add, or remove information from their existing CV, including personal details, education, experience, skills, and other relevant sections.
                     * Preconditions: Student must be logged in and have an existing CV in the system.
                     * Postconditions: CV information is updated and changes are validated before being stored in the system.
Validate CV Updates:
                     * Actor/s: System
                     * Description: Automatically validates the updated CV information to ensure data integrity, completeness, and proper formatting before accepting the changes.
                     * Preconditions: Student must have submitted CV updates through the update function.
                     * Postconditions: CV updates are either validated and accepted or rejected with error messages for correction.
Maintain CV Data:
                     * Actor/s: System
                     * Description: Continuously manages and maintains the integrity of stored CV data, ensuring it remains accessible, up-to-date, and properly organized for retrieval purposes.
                     * Preconditions: CV data must exist in the system and validation must be completed.
                     * Postconditions: CV data is properly maintained and ready for storage or job matching processes.
Store CV Data:
                     * Actor/s: System
                     * Description: Securely stores validated CV information in the database, maintaining version history and ensuring data persistence for future access and job matching operations.
                     * Preconditions: CV data must be validated and maintained by the system.
                     * Postconditions: CV data is securely stored and available for retrieval and job matching purposes.
Retrieve CV for Job Matching:
                     * Actor/s: System
                     * Description: Accesses stored CV data to analyze and match student qualifications with available job opportunities, supporting the job recommendation process.
                     * Preconditions: CV data must be stored in the system.
                     * Postconditions: CV data is retrieved and made available for job matching algorithms and processes.
Activity Diagram:  
Wireframe:  



Module 3 - Employer Portal and Job Matching

3.1 Employer Dashboard and Job Posting
Use Case Diagram:
  

Use Case Description:

        Access Dashboard:
                     * Actor/s: Employer
                     * Description: Enables employers to access their main dashboard interface where they can view and manage all job-related activities, postings, and applications.
                     * Preconditions: Employer must be logged in with valid credentials.
                     * Postconditions: Employer gains access to the dashboard with all job management functionalities available.
Create Job Listing:
                     * Actor/s: Employer
                     * Description: Allows employers to create new job postings by entering job details, requirements, descriptions, and other relevant information for potential candidates.
                     * Preconditions: Employer must be logged in and have access to the dashboard.
                     * Postconditions: New job listing is created, validated, and published for candidates to view and apply.
Edit Job Listing:
                     * Actor/s: Employer
                     * Description: Enables employers to modify existing job postings by updating job details, requirements, status, or other information as needed.
                     * Preconditions: Employer must be logged in, have access to dashboard, and job listing must exist.
                     * Postconditions: Job listing is updated with new information, validated, and changes are saved to the system.
Delete Job Listing:
                     * Actor/s: Employer
                     * Description: Allows employers to remove job postings from the system when positions are filled or no longer available.
                     * Preconditions: Employer must be logged in, have access to dashboard, and job listing must exist.
                     * Postconditions: Job listing is permanently removed from the system and no longer visible to candidates.
View Job Applications:
                     * Actor/s: Employer
                     * Description: Enables employers to review applications submitted by candidates for their job postings, including candidate profiles and CVs.
                     * Preconditions: Employer must be logged in, have access to dashboard, and job applications must exist.
                     * Postconditions: Employer can view and review candidate applications for decision making.
Manage Job Status:
                     * Actor/s: Employer
                     * Description: Allows employers to update the status of job postings (active, closed, on hold) and manage the recruitment process lifecycle.
                     * Preconditions: Employer must be logged in, have access to dashboard, and job listing must exist.
                     * Postconditions: Job status is updated and reflects the current state of the recruitment process.
Validate Job Details:
                     * Actor/s: System
                     * Description: Automatically validates job listing information to ensure completeness, accuracy, and compliance with system requirements before saving or publishing.
                     * Preconditions: Employer must have submitted job details for creation or editing.
                     * Postconditions: Job details are either validated and accepted or rejected with error messages for correction.


Activity Diagram:  














Wireframe:  





























































3.2 Job Matching Algorithm
Use Case Diagram:  
Use Case Description:


Analyze CV Data:
                     * Actor/s: Gemini AI
                     * Description: Automatically processes and analyzes student CV information including skills, experience, education, and qualifications to extract relevant data for matching purposes.
                     * Preconditions: Student CV data must exist in the system and be accessible for analysis.
                     * Postconditions: CV data is processed and structured for comparison with job requirements.
Extract Job Requirements:
                     * Actor/s: Gemini AI
                     * Description: Automatically parses job postings to identify and extract key requirements, skills, qualifications, and criteria needed for each position.
                     * Preconditions: Job postings must exist in the system with detailed requirements and descriptions.
                     * Postconditions: Job requirements are extracted and structured for comparison with student profiles.
Generate Match Score:
                     * Actor/s: Gemini AI
                     * Description: Calculates numerical scores representing how well student qualifications align with specific job requirements using algorithmic analysis and weighting factors.
                     * Preconditions: Both CV data and job requirements must be analyzed and available for comparison.
                     * Postconditions: Match scores are generated for student-job combinations and stored in the system.
Rank Job Matches:
                     * Actor/s: Gemini AI
                     * Description: Orders and prioritizes job opportunities for students based on their match scores, presenting the best matches first for optimal user experience.
                     * Preconditions: Match scores must be generated for multiple job positions and student profiles.
                     * Postconditions: Job matches are ranked and organized by compatibility score for presentation.
Display Match Results:
                     * Actor/s: Gemini AI, Student, Employer
                     * Description: Presents ranked job matches and scores to students and relevant match information to employers through the user interface.
                     * Preconditions: Job matches must be ranked and ready for presentation to users.
                     * Postconditions: Students and employers can view match results and scores through their respective interfaces.
Update Match Scores:
                     * Actor/s: Gemini AI
                     * Description: Continuously recalculates and refreshes match scores when student profiles or job requirements are modified to maintain accuracy.
                     * Preconditions: Changes must occur in either student CV data or job posting requirements.
                     * Postconditions: Match scores are updated to reflect current information and remain accurate.
Provide Match Recommendations:
                     * Actor/s: Gemini AI
                     * Description: Delivers personalized job recommendations to students based on their highest match scores and preferences, facilitating targeted job searching.
                     * Preconditions: Match scores must be updated and available for generating recommendations.
                     * Postconditions: Students receive tailored job recommendations based on their profile compatibility.


Activity Diagram:  
Wireframe:  







Module 4 - Job Application and Admin Functionalities


4.1 Student Job Application
Use Case Diagram:
  

Use Case Description:
Find Match Job
                     * Actor/s: Student
                     * Description: Allows students to find job opportunities that match their profile, skills, and preferences through an AI matching algorithm that considers their academic background, experience, and career interests.
                     * Preconditions: Student must be authenticated and have done filling onboarding form.
                     * Postconditions: Matched job opportunities are displayed to the student with relevance scores and the ability to apply.
Swipe Right to Apply
                     * Actor/s: Student
                     * Description: Enables students to quickly apply to matched jobs using a swipe-right gesture interface.
                     * Preconditions: Student must have matched jobs available for review in the system.
                     * Postconditions: Job application is submitted successfully with confirmation sent to student and employer notification triggered.
Swipe Left to Pass
                     * Actor/s: Student
                     * Description: Allows students to dismiss job opportunities that don't interest them using a swipe-left gesture.
                     * Preconditions: Student must have matched jobs available for review in the system.
                     * Postconditions: Job is marked as not interested and removed from current recommendations.
Browse Job Cards
                     * Actor/s: Student
                     * Description: Provides students with the ability to browse through available job opportunities in a card-based interface, allowing them to view multiple job listings efficiently.
                     * Preconditions: Student must be authenticated and have access to job browsing functionality.
                     * Postconditions: Job cards are displayed with essential information allowing students to make informed decisions about job opportunities.
View Job Details
                     * Actor/s: Student
                     * Description: Enables students to access more information about the specific job opportunities.
                     * Preconditions: Student must have selected a job from browse or matched results and have appropriate access permissions.
                     * Postconditions: Detailed job information is displayed including application instructions and related company details.
View Matches
                     * Actor/s: Student
                     * Description: Allows students to review all their matched job opportunities, providing easy access to jobs that align with their profile.
                     * Preconditions: Student must be authenticated and have completed profile information for matching algorithm to function.
                     * Postconditions: All matched jobs are displayed with match scores.
Track Application Status
                     * Actor/s: Student
                     * Description: Provides students with the ability to monitor the progress of their job applications including submission confirmation, review status, and employer responses.
                     * Preconditions: Student must have submitted job applications through the system and be authenticated.
                     * Postconditions: Current application statuses are displayed with timeline information.
View Application Details
                     * Actor/s: Student
                     * Description: Enables students to review detailed information about their submitted applications including generated cover letter, application materials, submission dates, and employer feedback.
                     * Preconditions: Student must have submitted applications and be authenticated with access to application history.
                     * Postconditions: Comprehensive application details are displayed including generated cover letter from gemini AI.
Generate Cover Letter
                     * Actor/s: Student, Gemini AI
                     * Description: Utilizes AI technology to automatically generate personalized cover letters based on student profiles and specific job requirements.
                     * Preconditions: Student must have complete profile information and have selected a specific job for application.
                     * Postconditions: Customized cover letter is generated and available for review.




Activity Diagram:
  













Wireframe:  






























4.2 Admin Dashboard and Functions
Use Case Diagram:  


Use Case Description:


Access Admin Dashboard
                     * Actor/s: Admin
                     * Description: Allows administrators to access the main administrative control panel where they can oversee all system operations.
                     * Preconditions: Admin must be authenticated with valid administrative credentials.
                     * Postconditions: Admin dashboard is displayed with current system status, user management, and summary information for administrative oversight and decision-making.
Manage User Accounts
                     * Actor/s: Admin
                     * Description: Provides administrators with comprehensive user account management capabilities.
                     * Preconditions: Admin must be authenticated with user management privileges and have access to the user administration interface with appropriate security clearance.
                     * Postconditions: User account modifications are successfully applied, changes are reflected in the system database.
Activate Account
                     * Actor/s: Admin
                     * Description: Enables administrators to manually activate user accounts that have been deactivated.
                     * Preconditions: Admin must have account activation privileges, target user account must exist in inactive state, and proper verification procedures must be completed.
                     * Postconditions: User account is activated successfully, user receives activation notification, and account permissions are enabled according to assigned user role.
Deactivate Account
                     * Actor/s: Admin
                     * Description: Allows administrators to temporarily deactivate user accounts for policy violations, security concerns, or user requests.
                     * Preconditions: Admin must have account deactivation privileges, target account must be currently active.
                     * Postconditions: User account is deactivated, access is revoked, user is notified of deactivation, and account status is updated in system records.
Delete Account
                     * Actor/s: Admin
                     * Description: Provides administrators with the ability to permanently remove user accounts from the system.
                     * Preconditions: Admin must have account deletion privileges, proper authorization procedures must be followed, and data backup requirements must be satisfied before deletion.
                     * Postconditions: User account and associated data are permanently removed from active system, deletion is logged for audit purposes, and data retention policies are enforced.
Monitor System Activity
                     * Actor/s: Admin
                     * Description: Enables administrators to track and analyze system usage patterns, user activities, performance metrics, and security events to ensure optimal system operation and identify potential issues.
                     * Preconditions: Admin must have monitoring privileges, system logging must be enabled, and monitoring tools must be accessible with sufficient historical data available.
                     * Postconditions: System activity reports are generated and displayed, performance metrics are updated, and any anomalies or security concerns are flagged for administrative attention.


Wireframe:  


























3.3 Non-functional requirements


3.3.1 Performance Requirements
1.Performance and Scalability
                     * Support 20 concurrent users with response times under 500 ms for critical operations
                     * Design database schema with proper indexing for efficient queries
                     * Implement caching strategies for frequently accessed data
                     * Ensure smooth operation during peak usage periods
2. Security and Data Protection
                     * Implement JWT-based authentication with proper token management
                     * Secure all API endpoints with appropriate authorization checks
                     * Encrypt sensitive user data in transit and at rest
                     * Comply with the Philippines' Data Privacy Act of 2012
3. Usability and Accessibility
                     * Design responsive interfaces that work across devices (desktop, tablet, mobile)
                     * Implement intuitive navigation and user flows
                     * Ensure accessibility compliance for all user interfaces
                     * Provide clear error messages and user guidance
4. Reliability and Availability
                     * Achieve 99.9% system uptime through robust hosting infrastructure
                     * Implement proper error handling and logging
                     * Create automated backup and recovery procedures
                     * Develop monitoring systems for early issue detection
3.3.2 Security Requirements
1. Authentication:
                     * OAuth 2.0 integration with GitHub and Google
                     * JWT-based session management with appropriate expiration
                     * Password complexity requirements (minimum 8 characters, mixed case, numbers)
2. Authorization:
                     * Role-based access control for all system functions
                     * Permission validation on both frontend and backend
                     * Session timeout after 30 minutes of inactivity
3. Data Protection:
                     * Encryption of sensitive data at rest using AES-256
                     * TLS 1.3 for all data in transit (HTTPS only)
                     * CV files stored with access controls
4. Security Controls:
                     * Input validation to prevent SQL injection and XSS
                     * CSRF protection for all forms
                     * Rate limiting to prevent abuse (100 requests per minute per user)
                     * Secure headers implementation
5. Compliance:
                     * Adherence to Philippines Data Privacy Act of 2012
                     * Clear user consent for data collection and processing
                     * Data deletion capabilities for GDPR-like compliance


3.3.3 Reliability Requirements
1.  Availability:
                     * System should maintain 99.9% uptime during academic terms
                     * Scheduled maintenance limited to non-peak hours
                     * Automated monitoring with alerts for system issues
2. Fault Tolerance:
                     * Graceful degradation if AI services are unavailable
                     * Database transaction management to prevent data corruption
                     * Error logging and reporting for troubleshooting
3. Recovery:
                     * Daily database backups with 30-day retention
                     * Application state preservation during minor outages
                     * Recovery time objective (RTO) of 4 hours for critical functions
4. Data Integrity:
                     * Daily automated backups
                     * 30-day backup retention
                     * Recovery Time Objective (RTO): 4 hours
                     * Data integrity validation
[a]di pako sure ani