# Production Configuration
server.port=${PORT:8081}

# PostgreSQL Configuration (Production)
spring.datasource.url=${DATABASE_URL:jdbc:postgresql://ep-super-sunset-adxvm444-pooler.c-2.us-east-1.aws.neon.tech/neondb?&sslmode=require&channelBinding=require}
spring.datasource.username=${DATABASE_USERNAME:neondb_owner}
spring.datasource.password=${DATABASE_PASSWORD:npg_r7NAoUChX9QM}
spring.datasource.driver-class-name=org.postgresql.Driver

# JPA Configuration (Production)
spring.jpa.hibernate.ddl-auto=validate
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=false
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.defer-datasource-initialization=false

# Make hibernate use same case for table names
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyJpaImpl

# Disable globally quoted identifiers to avoid case sensitivity issues
spring.jpa.properties.hibernate.globally_quoted_identifiers=false

# Disable SQL initialization
spring.sql.init.mode=never

# JWT Configuration
app.jwt.secret=${JWT_SECRET:OJTechSecretKeyForJwtAuthenticationVeryLongAndSecureKeyForProduction}
app.jwt.expiration=86400000
app.jwt.header=Authorization
app.jwt.prefix=Bearer 

# Cloudinary Configuration
cloudinary.cloud-name=${CLOUDINARY_CLOUD_NAME:df7wrezta}
cloudinary.api-key=${CLOUDINARY_API_KEY:925158563376871}
cloudinary.api-secret=${CLOUDINARY_API_SECRET:LzSstJ4NWGoQPHFcMppJQHhHdbA}
cloudinary.api-secret-preset=${CLOUDINARY_PRESET:OJTECHPDF}

# File Upload Configuration
spring.servlet.multipart.max-file-size=10MB
spring.servlet.multipart.max-request-size=10MB
file.upload-dir=uploads

# OpenAPI/Swagger Configuration
springdoc.api-docs.path=/api-docs
springdoc.swagger-ui.path=/swagger-ui.html
springdoc.swagger-ui.operationsSorter=method

# Logging Configuration (Production)
logging.level.org.springframework.security=WARN
logging.level.com.melardev.spring.jwtoauth=INFO
logging.level.org.hibernate.SQL=WARN
logging.level.org.hibernate.type.descriptor.sql.BasicBinder=WARN

# Google OAuth2 Configuration
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID:620290557257-ejn97p36735ful8vc3g7j00gt2q05sje.apps.googleusercontent.com}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET: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}
spring.security.oauth2.client.registration.google.scope=email,profile

# GitHub OAuth2 Configuration
spring.security.oauth2.client.registration.github.client-id=${GITHUB_CLIENT_ID:Ov23li4gxkGK900aEkLs}
spring.security.oauth2.client.registration.github.client-secret=${GITHUB_CLIENT_SECRET:8b46fd7029adb00c57b0015edd56652b2cd49b1c}
spring.security.oauth2.client.registration.github.scope=user:email
spring.security.oauth2.client.registration.github.redirect-uri=${app.base-url}/auth/github/callback

# Gemini API Configuration
gemini.api.key=${GEMINI_API_KEY:AIzaSyA8-ny-LlhOwSvU9kT6M5lWLG2eLzvvWpM}

# Email Configuration
email.enabled=${EMAIL_ENABLED:true}

# Brevo API Configuration
brevo.api.key=${BREVO_API_KEY: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}
brevo.api.url=${BREVO_API_URL:https://api.brevo.com/v3/smtp/email}

# Verified sender email address
spring.mail.email=${SPRING_MAIL_EMAIL:ojtech.team@gmail.com}

# Application Base URL (Production)
app.base-url=${FRONTEND_URL:https://ojtech-frontend.onrender.com}
backend.base-url=${BACKEND_URL:https://ojtech-backend.onrender.com}

# Production optimizations
spring.jpa.properties.hibernate.jdbc.batch_size=20
spring.jpa.properties.hibernate.order_inserts=true
spring.jpa.properties.hibernate.order_updates=true
spring.jpa.properties.hibernate.jdbc.batch_versioned_data=true
